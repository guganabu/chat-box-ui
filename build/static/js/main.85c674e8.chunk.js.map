{"version":3,"sources":["services/Socket.js","services/Message.js","context/UserContext.js","components/MsgInput.js","components/MsgList.js","components/UserPreference.js","components/ChatPanel.js","App.js","reportWebVitals.js","index.js"],"names":["socketClient","this","io","on","console","log","subject","Subject","messageService","message","next","asObservable","UserContext","React","createContext","MsgInput","props","onKeyPress","e","charCode","emit","onInputchange","event","setState","target","name","value","room","_msgObject","inputMsg","state","actor","data","text","date_time","Date","user_name","context","className","Icon","onClick","type","onChange","Component","contextType","MsgList","scrollToBottom","messagesEnd","scrollIntoView","messages","map","msg","seq","format","style","float","clear","ref","el","UserPreference","joinChat","sendAction","inputName","handleChange","ChatPanel","captureUserPref","userPref","isShowInitialState","msgSubscription","subscribe","updateMsgs","unsubscibe","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85c674e8.chunk.js","sourcesContent":["import { io } from \"socket.io-client\"\n\nclass SocketClient {\n  constructor() {\n    this.io = io(`https://g-chat-box.herokuapp.com`)\n  }\n\n  init() {\n    this.io.on(\"connect\", () => {\n      console.log(\"socket connected!\")\n    })\n  }\n}\n\nexport const socketClient = new SocketClient().io\n","import { Subject } from \"rxjs\"\n\nconst subject = new Subject()\nexport const messageService = {\n  pushMessage: (message) => {\n    subject.next(message)\n  },\n  getMessage: () => subject.asObservable(),\n}\n","import React from \"react\"\n\nconst UserContext = React.createContext()\nexport default UserContext\n","import React from \"react\"\nimport \"./MsgInput.scss\"\nimport { socketClient } from \"../services/Socket\"\nimport { messageService } from \"../services/Message\"\nimport UserContext from \"../context/UserContext\"\nimport Icon from \"@material-ui/core/Icon\"\n\nclass MsgInput extends React.Component {\n  static contextType = UserContext\n  constructor(props) {\n    super(props)\n    this.state = { inputMsg: \"\" }\n  }\n\n  onKeyPress = (e) => {\n    if (e.charCode === 13) {\n      this.emit()\n    }\n  }\n\n  onInputchange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  emit = () => {\n    socketClient.emit(this.props.room, this._msgObject())\n    messageService.pushMessage(this._msgObject())\n    this.setState({ inputMsg: \"\" })\n  }\n\n  _msgObject() {\n    return {\n      actor: \"self\",\n      data: {\n        text: this.state.inputMsg,\n        date_time: new Date(),\n        user_name: this.context.name,\n      },\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"MsgInput\">\n        <Icon className=\"MsgInput-icon\" onClick={this.emit}>\n          send\n        </Icon>\n        <input\n          type=\"text\"\n          name=\"inputMsg\"\n          className=\"MsgInput-box\"\n          value={this.state.inputMsg}\n          onKeyPress={this.onKeyPress}\n          onChange={this.onInputchange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default MsgInput\n","import React from \"react\"\nimport \"./MsgList.scss\"\nimport { format } from \"date-fns\"\n\nclass MsgList extends React.Component {\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView(false)\n  }\n\n  render() {\n    return (\n      <div className=\"MsgList\">\n        {this.props.messages.map((msg, seq) => {\n          return (\n            <div className={`MsgListItemContainer ${msg.actor}`} key={seq}>\n              <div className=\"UserName\">\n                {msg.actor === \"self\" ? \"You\" : msg.data.user_name}\n              </div>\n              <div className=\"MsgListItem\">\n                <span className=\"MsgListItemValue\">\n                  <span className=\"MsgListItemValueText\">{msg.data.text}</span>\n                  <span className=\"MsgListItemValueTime\">\n                    {format(new Date(msg.data.date_time), \"p\")}\n                  </span>\n                </span>\n              </div>\n            </div>\n          )\n        })}\n        <div\n          style={{ float: \"left\", clear: \"both\" }}\n          ref={(el) => {\n            this.messagesEnd = el\n          }}\n        ></div>\n      </div>\n    )\n  }\n}\n\nexport default MsgList\n","import React from \"react\"\nimport \"./UserPreference.scss\"\n\nexport default class UserPreference extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputName: \"\",\n    }\n  }\n  joinChat = () => {\n    this.props.sendAction({\n      name: this.state.inputName,\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({ inputName: event.target.value })\n  }\n  render() {\n    return (\n      <div className=\"UserPrefContainer\">\n        <div className=\"InputContainer\">\n          <div className=\"InputName\">\n            <span className=\"Label\">Enter your name</span>\n            <input\n              className=\"Input\"\n              name=\"inputName\"\n              value={this.state.inputName}\n              onChange={this.handleChange}\n            ></input>\n          </div>\n        </div>\n        <div className=\"ActionContainer\">\n          <button className=\"Button\" onClick={this.joinChat}>\n            Join Chat\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n","import \"./ChatPanel.scss\"\nimport { socketClient } from \"../services/Socket\"\nimport React from \"react\"\nimport MsgInput from \"./MsgInput\"\nimport MsgList from \"./MsgList\"\nimport { messageService } from \"../services/Message\"\nimport UserPreference from \"./UserPreference\"\nimport UserContext from \"../context/UserContext\"\n\nexport default class ChatPanel extends React.Component {\n  constructor() {\n    super()\n    this.state = { messages: [], isShowInitialState: true, userPref: {} }\n    this.msgSubscription = null\n  }\n\n  componentDidMount() {\n    // Local msgs captured via context\n    this.msgSubscription = messageService.getMessage().subscribe((message) => {\n      this.updateMsgs(message)\n    })\n\n    // Public msgs captured via socket\n    socketClient.on(\"private\", (msg) => {\n      this.updateMsgs(msg)\n    })\n  }\n\n  componentWillUnmount() {\n    this.msgSubscription.unsubscibe()\n  }\n\n  updateMsgs(message) {\n    this.setState({ messages: [...this.state.messages, message] })\n  }\n\n  captureUserPref = (userPref) => {\n    this.setState({ isShowInitialState: false, userPref: userPref })\n  }\n\n  render() {\n    if (this.state.isShowInitialState) {\n      return <UserPreference sendAction={this.captureUserPref} />\n    } else {\n      return (\n        <div className=\"ChatWindow\">\n          <UserContext.Provider value={this.state.userPref}>\n            <MsgList messages={this.state.messages} />\n            <MsgInput room=\"private\" userPref={{}} />\n          </UserContext.Provider>\n        </div>\n      )\n    }\n  }\n}\n","import \"./App.scss\"\nimport ChatPanel from \"./components/ChatPanel\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"Main\">\n        <div className=\"ChatContainer\">\n          <ChatPanel />\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}